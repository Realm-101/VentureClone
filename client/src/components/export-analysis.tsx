import { useState } from "react";
import { Download, FileText, FileSpreadsheet, FileJson } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import type { BusinessAnalysis } from "@/types";

interface ExportAnalysisProps {
  analysis: BusinessAnalysis;
  stages?: any[];
}

export function ExportAnalysis({ analysis, stages = [] }: ExportAnalysisProps) {
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  const generatePDF = () => {
    // Create HTML content for PDF
    const htmlContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { color: #FF4500; }
            h2 { color: #DC143C; margin-top: 20px; }
            h3 { color: #333; margin-top: 15px; }
            .score { background: #f0f0f0; padding: 10px; border-radius: 5px; margin: 10px 0; }
            .insight { background: #fff3e0; padding: 10px; border-radius: 5px; margin: 10px 0; }
            table { width: 100%; border-collapse: collapse; margin: 10px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <h1>Business Analysis Report</h1>
          <h2>Business Overview</h2>
          <p><strong>URL:</strong> ${analysis.url}</p>
          <p><strong>Business Model:</strong> ${analysis.businessModel || 'N/A'}</p>
          <p><strong>Revenue Stream:</strong> ${analysis.revenueStream || 'N/A'}</p>
          <p><strong>Target Market:</strong> ${analysis.targetMarket || 'N/A'}</p>
          <div class="score">
            <h3>Overall Score: ${analysis.overallScore}/10</h3>
          </div>
          
          ${analysis.scoreDetails ? `
            <h2>Detailed Scoring</h2>
            <table>
              <tr>
                <th>Criteria</th>
                <th>Score</th>
                <th>Reasoning</th>
              </tr>
              <tr>
                <td>Technical Complexity</td>
                <td>${analysis.scoreDetails.technicalComplexity.score}/10</td>
                <td>${analysis.scoreDetails.technicalComplexity.reasoning}</td>
              </tr>
              <tr>
                <td>Market Opportunity</td>
                <td>${analysis.scoreDetails.marketOpportunity.score}/10</td>
                <td>${analysis.scoreDetails.marketOpportunity.reasoning}</td>
              </tr>
              <tr>
                <td>Competitive Landscape</td>
                <td>${analysis.scoreDetails.competitiveLandscape.score}/10</td>
                <td>${analysis.scoreDetails.competitiveLandscape.reasoning}</td>
              </tr>
              <tr>
                <td>Resource Requirements</td>
                <td>${analysis.scoreDetails.resourceRequirements.score}/10</td>
                <td>${analysis.scoreDetails.resourceRequirements.reasoning}</td>
              </tr>
              <tr>
                <td>Time to Market</td>
                <td>${analysis.scoreDetails.timeToMarket.score}/10</td>
                <td>${analysis.scoreDetails.timeToMarket.reasoning}</td>
              </tr>
            </table>
          ` : ''}
          
          ${analysis.aiInsights ? `
            <h2>AI Insights</h2>
            <div class="insight">
              <h3>Key Insight</h3>
              <p>${analysis.aiInsights.keyInsight}</p>
            </div>
            <div class="insight">
              <h3>Risk Factor</h3>
              <p>${analysis.aiInsights.riskFactor}</p>
            </div>
            <div class="insight">
              <h3>Opportunity</h3>
              <p>${analysis.aiInsights.opportunity}</p>
            </div>
          ` : ''}
          
          <p style="margin-top: 40px; text-align: center; color: #999;">
            Generated by VentureClone AI on ${new Date().toLocaleString()}
          </p>
        </body>
      </html>
    `;

    // Create a blob and download
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis-${analysis.id.slice(0, 8)}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateCSV = () => {
    const csvContent = [
      ['Field', 'Value'],
      ['URL', analysis.url],
      ['Business Model', analysis.businessModel || ''],
      ['Revenue Stream', analysis.revenueStream || ''],
      ['Target Market', analysis.targetMarket || ''],
      ['Overall Score', analysis.overallScore?.toString() || ''],
      ['Technical Complexity Score', analysis.scoreDetails?.technicalComplexity.score.toString() || ''],
      ['Market Opportunity Score', analysis.scoreDetails?.marketOpportunity.score.toString() || ''],
      ['Competitive Landscape Score', analysis.scoreDetails?.competitiveLandscape.score.toString() || ''],
      ['Resource Requirements Score', analysis.scoreDetails?.resourceRequirements.score.toString() || ''],
      ['Time to Market Score', analysis.scoreDetails?.timeToMarket.score.toString() || ''],
      ['Key Insight', analysis.aiInsights?.keyInsight || ''],
      ['Risk Factor', analysis.aiInsights?.riskFactor || ''],
      ['Opportunity', analysis.aiInsights?.opportunity || ''],
      ['Current Stage', analysis.currentStage.toString()],
      ['Created At', new Date(analysis.createdAt).toLocaleString()],
    ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis-${analysis.id.slice(0, 8)}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateJSON = () => {
    const exportData = {
      analysis,
      stages,
      exportedAt: new Date().toISOString(),
      version: '1.0.0'
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis-${analysis.id.slice(0, 8)}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleExport = async (format: 'pdf' | 'csv' | 'json') => {
    setIsExporting(true);
    try {
      switch (format) {
        case 'pdf':
          generatePDF();
          toast({
            title: "Export Successful",
            description: "Analysis exported as HTML report",
          });
          break;
        case 'csv':
          generateCSV();
          toast({
            title: "Export Successful",
            description: "Analysis exported as CSV",
          });
          break;
        case 'json':
          generateJSON();
          toast({
            title: "Export Successful",
            description: "Analysis exported as JSON",
          });
          break;
      }
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export analysis",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-vc-card border-vc-border text-vc-text hover:border-vc-primary"
          disabled={isExporting}
          data-testid="button-export-menu"
        >
          <Download className="mr-2 h-4 w-4" />
          {isExporting ? 'Exporting...' : 'Export'}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="bg-vc-card border-vc-border">
        <DropdownMenuItem
          onClick={() => handleExport('pdf')}
          className="text-vc-text hover:bg-vc-dark cursor-pointer"
          data-testid="export-pdf"
        >
          <FileText className="mr-2 h-4 w-4" />
          Export as Report (HTML)
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => handleExport('csv')}
          className="text-vc-text hover:bg-vc-dark cursor-pointer"
          data-testid="export-csv"
        >
          <FileSpreadsheet className="mr-2 h-4 w-4" />
          Export as CSV
        </DropdownMenuItem>
        <DropdownMenuItem
          onClick={() => handleExport('json')}
          className="text-vc-text hover:bg-vc-dark cursor-pointer"
          data-testid="export-json"
        >
          <FileJson className="mr-2 h-4 w-4" />
          Export as JSON
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}